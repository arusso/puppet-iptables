# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   
#
Puppet::Functions.create_function(:'iptables::iptables_format_to_port') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    red = ''
    red = args[0] if args[0].is_a?(String)

    return red if red == ''

    nums = red.split(':')

    nums.each do |n|
      # if we were given integer ports, do some minor logic on them
      if n.is_a? String and n.to_i.to_s == n and n.to_i > 65535
        raise Puppet::ParseError, "invalid port number (max is 65535)"
      end

      # if we ever figure out a way to look into the /etc/services file, we can
      # try and verify that the ports are valid
    end

    if nums.size == 1
      return "--to-port #{nums[0]}"
    elsif nums.size == 2
      return "--to-port #{nums[0]}:#{nums[1]}"
    else
      raise Puppet::ParseError, "invalid range definition '#{red}'"
    end
  
  end
end
