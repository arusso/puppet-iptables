# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   
#
Puppet::Functions.create_function(:'iptables::format_interface') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    # setup some objects to hold our regexes
    out_rx = /^out(going)?$/i
    in_rx = /^in(coming)?$/i
    int_rx = /^[a-z0-9\.\-_]+\+?$/i

    return '' if args == nil or args[0] == :undef
    return '' if args[0] == nil

    # make sure we were at least passed a string or nil
    raise Puppet::ParseError, "non-string interface passed - #{args[0]}" \
      unless args[0].kind_of?(String)

    interface = ''
    interface = String(args[0]).dup


    # handle cases where we weren't passed an interface
    return interface if interface == ''

    direction = 'in'
    direction = args[1] unless args[1] == nil

    raise Puppet::ParseError, "invalid direction specified - #{direction}" \
      unless direction =~ /(#{out_rx}|#{in_rx})/i

    # lets assume all interfaces will only have alphanumerics, plus
    # '.' and '_'
    raise Puppet::ParseError, "bad interface name passed - #{interface}" \
      unless interface =~ int_rx

    return "-o #{interface}" if direction =~ out_rx
    return "-i #{interface}"
  
  end
end
