# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#   Used internally by the iptables module, handles the determination of the initial
#value of our option by taking the provided name, values hash, defaults hash and
#default value, and returning the appropriate value.
#
#Example:
#
#  vals = { 'opt2' => '1', 'opt3' => '2' }
#  defs = { 'opt' => '0', 'opt3' => '4' }
#  default = '-1'
#
#  # returns '0'
#  opt_val = iptables_prep_option( 'opt', vals, defs, default )
#
#  # returns '1'
#  opt2_val = iptables_prep_option( 'opt2', vals, defs, default )
#
#  # returns '2'
#  opt3_val = iptables_prep_option( 'opt3', vals, defs, default )
#
#  # returns -1
#  opt4_val = iptables_prep_option( 'opt4', vals, defs, default )
#
#
Puppet::Functions.create_function(:'iptables::iptables_prep_option') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    name = args[0]
    
    vals = { }
    vals = args[1] if args[1].is_a?(Hash)

    defs = { }
    defs = args[2] if args[2].is_a?(Hash)


    default = ''
    default = args[3] unless args[3] == nil or args[3] == :undef

    # just run through the values
    ret = default
    ret = defs[name] unless defs[name] == nil or defs[name] == :undef or defs[name] == 'UNSET'
    ret = vals[name] unless vals[name] == nil or vals[name] == :undef or vals[name] == 'UNSET'

    return ret
  
  end
end
